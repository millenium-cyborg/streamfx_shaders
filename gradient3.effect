// Godrays
// by Millennium Cyborg
// for use with OBS + StreamFX

// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform texture2d InputA<
	bool automatic = true;
>;

uniform float4 ViewSize<
	bool automatic = true;
>;

uniform float4 Time<
	bool automatic = true;
>;

// User values
/*
uniform float _01_ThresholdLo<
  bool automatic = false;
	string name = "Lower Threshold";
	string description = "Ignore pixels with brightness below this value (0.0-1.0)";
	string field_type = "slider";
	float minimum = 0.;
	float maximum = 1.;
	float step = .01;
> = .99;
*/

#define M_PI 3.1415926538
#define M_TAU 6.2831853076

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float2 uv_to_px(float2 uv) {
  return (uv * ViewSize.xy) - 0.5;
}

float2 px_to_uv(float2 px) {
  return (px + 0.5) / ViewSize.xy;
}

float4 lerp3(float4 c0, float4 c1, float4 c2, float mid, float t)
{
  return (t < mid) 
    ? lerp(c0, c1, t / mid )
    : lerp(c1, c2, (t - mid) / (1. - mid));
}

float4 PSDefault(VertData v_in) : TARGET {
  
  const float2 px = uv_to_px(v_in.uv);
 
  float4 sample = InputA.Sample(def_sampler, px_to_uv(px));
  float4 c0 = float4(0., 0., 0., 0.);
  float4 c1 = float4(.25, 0.5, 1., .75);
  float4 c2 = float4(1., 1., 1., 1.);
  return lerp3(c0, c1, c2, .7, sample.a);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
