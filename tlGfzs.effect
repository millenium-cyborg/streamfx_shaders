// From Shadertoy - https://www.shadertoy.com/view/tlGfzd


// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform texture2d InputA<
	bool automatic = true;
>;

uniform float4 Time<
	bool automatic = true;
>;

uniform float4 ViewSize<
  bool automatic = true;
>;

// User values

// by Dave_Hoskins

float hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float2x2 rot(float a){
    float s = sin(a);
    float c = cos(a);
    return float2x2(c, s, -s, c);
}

float radians(float deg) {
  return (deg / 180) * 3.14159;
}

float de(float3 pos, inout float4 objcol)
{
  //float t = fmod(Time.x, 17.);
  float t = abs(fmod(Time.x, 2*17.) - 17.);
  float a=smoothstep(13.,15.,t)*8.-smoothstep(4.,0.,t)*4.;
  float f=sin(Time.x*5.+sin(Time.x*20.)*.2);
  
  pos.xz = mul(pos.xz, rot(Time.x+.5));
  pos.yz = mul(pos.yz, rot(Time.x));
  
  float3 p = pos;
  float s=1.;
  
  for (int i=0; i<4; i++){
    p = abs(p)*1.3-.5-f*.1-a;
    p.xy = mul(p.xy, rot(radians(45.)));
    p.xz = mul(p.xz, rot(radians(45.)));
    s = s*1.3;
  }
  
  float fra = length(p)/s-.5;
  pos.xy = mul(pos.xy, rot(Time.x));
  p = abs(pos) - 2. - a;
  float d = length(p) - .7;
  d = min(d, max(length(p.xz)-.1,p.y));
  d = min(d, max(length(p.yz)-.1,p.x));
  d = min(d, max(length(p.xy)-.1,p.z));
  p = abs(pos);
  p.x -= 4.+a+f*.5;
  d = min(d, length(p) - .7);
  d = min(d, length(p.yz-abs(sin(p.x*.5-Time.x*10.)*.3)));
  p = abs(pos);
  p.y -= 4.+a+f*.5;
  d = min(d, length(p) - .7);
  d = min(d, max(length(p.xz)-.1,p.y));
  d = min(d, fra);
  objcol = float4(abs(p).xyz, 1.);
  if (d==fra) { objcol=float4(2.,0.,0.,1.); }
  return d;
}


float3 normal(float3 p, inout float4 objcol) {
    float2 d = float2(0., .01);
    return normalize(float3(de(p+d.yxx, objcol), de(p+d.xyx, objcol), de(p+d.xxy, objcol))-de(p, objcol));
}

float4 march(float2 px, float3 from, float3 dir)
{
  float d = 0.;
  float td = 0.;
  float maxdist = 30.;
  float3 p = from;
  
  float4 col = float4(0., 0., 0., 1.);
  float4 objcol = float4(2., 0., 0., 1.);
  
  for (int i = 0; i<100; i++)
  {  
    float d2 = de(p, objcol) * (1.-hash12(px+Time.x)*.2);
    
    if (d2<0.)
    {
      float3 n = normal(p, objcol);
      dir = reflect(dir, n);
      d2 = .1;
    }
    
    d = max(.01, abs(d2));
    p += d * dir;
    td += d;
    if (td > maxdist) { break; }
    col += .01 * objcol;
  }
  return pow(col, float4(2., 2., 2., 1.));
}

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET {
  float2 px = v_in.uv * ViewSize.xy;
  float2 uv = v_in.uv - 0.5;
  uv.x *= ViewSize.x / ViewSize.y;
  float3 from = float3(0.,0.,-10.);
  float3 dir = normalize(float3(uv, 1.));
  float4 col = march(px, from, dir);
  return col;
}


technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
