// From Shadertoy - https://www.shadertoy.com/view/4slGWH

/* Created by Nikita Miropolskiy, nikat/2013
 * This work is licensed under a 
 * Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
 * http://creativecommons.org/licenses/by-nc-sa/3.0/
 *  - You must attribute the work in the source code 
 *    (link to https://www.shadertoy.com/view/XsX3zB).
 *  - You may not use this work for commercial purposes.
 *  - You may distribute a derivative work only under the same license.
 */

// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;

// Provided by Stream Effects
uniform float4 Time<
	bool automatic = true;
>;

uniform float4 ViewSize<
  bool automatic = true;
>;

// User values

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

// http://mrl.nyu.edu/~perlin/flownoise-talk/#17

/* skew constants for 3d simplex functions */
#define F3 0.3333333
#define G3 0.1666667

float4 quat_rotation( float half_angr, float3 unitVec )
{
    float s, c;
    s = sin( half_angr );
    c = cos( half_angr );
    return float4( unitVec*s, c );
}

float3 quat_times_vec(float4 q, float3 v)
{
	//http://molecularmusings.wordpress.com/2013/05/24/a-faster-quaternion-vector-multiplication/
	float3 t = 2. * cross(q.xyz, v);
	return v + q.w * t + cross(q.xyz, t);
}

/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */
float3 random3(float4 quat, float3 c) 
{
	float j = 4096.0*sin(dot(c,float3(17., 59.4, 15.)));
	float3 r;
	r.z = frac(512.*j);
	j *= .125;
	r.x = frac(512.*j);
	j *= .125;
	r.y = frac(512.*j);
	r = r-0.5;

	// rotate for extra flow!
	r=quat_times_vec(quat,r);
	
	return r;
}

float4 dnoise(float4 quat, float3 p) 
{
  // 1. find current tetrahedron T and its four vertices
  // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices
  // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices
  
  float3 s = floor(p + (p.x+p.y+p.z)*F3);
  float3 x = p - s + (s.x+s.y+s.z)*G3;
  
  float3 e = step(float3(0.,0.,0.), x - x.yzx);
  float3 i1 = e*(1. - e.zxy);
  float3 i2 = 1. - e.zxy*(1. - e);
  
  float3 x1 = x - i1 + G3;
  float3 x2 = x - i2 + 2.0*G3;
  float3 x3 = x - 1.0 + 3.0*G3;

  // calculate surflet weights
  float4 w;
  w.x = dot(x, x);
  w.y = dot(x1, x1);
  w.z = dot(x2, x2);
  w.w = dot(x3, x3);
  
  // w fades from 0.6 at the center of the surflet to 0.0 at the margin
  w = max(.6 - w, 0.);		//aka t0,t1,t2,t3
  float4 w2 = w*w;				//aka t20,t21,t22,t23
  float4 w4 = w2*w2;			//aka t40,t41,t42,t43
  
  // 2. find four surflets and store them in d
  float3 g0 = random3(quat, s);
  float3 g1 = random3(quat, s + i1);
  float3 g2 = random3(quat, s + i2);
  float3 g3 = random3(quat, s + 1.0);
  
  float4 d;
  // calculate surflet components
  d.x = dot(g0, x);		//aka graddotp3( gx0, gy0, gz0, x0, y0, z0 )
  d.y = dot(g1, x1);
  d.z = dot(g2, x2);
  d.w = dot(g3, x3);
  
  //derivatives as per
  //http://webstaff.itn.liu.se/~stegu/aqsis/flownoisedemo/srdnoise23.c
  float4 w3 = w*w2;
  float4 temp = w3*d;
  float3 res = temp[0]*x;
  res += temp[1]*x1;
  res += temp[2]*x2;
  res += temp[3]*x3;
  res *= -8.;
  res += w4[0]*g0+w4[1]*g1+w4[2]*g2+w4[3]*g3;
  res *= 52.; //???

	d *= w4;	//aka n0,n1,n2,n3
	 
	float n = (d.x+d.y+d.z+d.w)*52.;
	
	return float4(res,n);
}

float4 FlowNoise(float3 uvw, float2 uv)
{
	float4 n = float4(0.,0.,0.,0.);

	float f = 1.;
	float a = 1.;
			
	float lac = 2.13;

	float3 ax = normalize(float3(1.,1.,1.)); 
	float e = 0.1;
	float ang;
	float4 dn;
  ang = Time.x*.4+uv.y*0.5;
  
  float4 quat = quat_rotation( ang*2.*f, normalize(ax) );
  dn = dnoise(quat, uvw);
  uvw -= 0.01*dn.xyz;
  n += abs(a*dn);
  uvw *= lac;
  f *= lac;
  a *= (1./lac);

  ang = Time.x*.4+uv.y*0.5;
  quat = quat_rotation( ang*2.*f, normalize(ax) );
  dn = dnoise(quat, uvw);
  uvw -= 0.01*dn.xyz;
  n += abs(a*dn);
  uvw *= lac;
  f *= lac;
  a *= (1./lac);

  ang = Time.x*.4+uv.y*0.5;
  quat = quat_rotation( ang*2.*f, normalize(ax) );
  dn = dnoise(quat, uvw);
  uvw -= 0.01*dn.xyz;
  n += abs(a*dn);
  uvw *= lac;
  f *= lac;
  a *= (1./lac);

  ang = Time.x*.4+uv.y*0.5;
  quat = quat_rotation( ang*2.*f, normalize(ax) );
  dn = dnoise(quat, uvw);
  uvw -= 0.01*dn.xyz;
  n += abs(a*dn);
  uvw *= lac;
  f *= lac;
  a *= (1./lac);

  ang = Time.x*.4+uv.y*0.5;
  quat = quat_rotation( ang*2.*f, normalize(ax) );
  dn = dnoise(quat, uvw);
  uvw -= 0.01*dn.xyz;
  n += abs(a*dn);
  uvw *= lac;
  f *= lac;
  a *= (1./lac);
	return n;
}
	
//thanks iq..
// Smooth HSV to RGB conversion 
float3 hsv2rgb_smooth( float3 c )
{
  
  float3 rgb =
    clamp(abs(fmod(c.x*6.+float3(0.,4.,2.),6.)-3.) - 1., 0., 1. );
	rgb = rgb*rgb*(3.-2.*rgb); // cubic smoothing	

	return c.z * lerp( float3(1.,1.,1.), rgb, c.y);
}

float3 FlameColour(float f)
{
	return hsv2rgb_smooth(float3(
    (f-(2.25/6.))*(1.25/6.),
    f*1.25+.2,
    f*.95));
}

// Shader code
struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET {
  
  float2 uv = v_in.uv;

	uv.x *= ViewSize.x/ViewSize.y;
	uv.y = 1. - uv.y;
	
	float t = Time.x*0.8;
	float3 uvw = float3(uv*1.15+float2(0.,t),t*0.5);

	float4 d = FlowNoise(uvw,uv);
	float de = d.w;
	de = length(d.xyz)*.15+.2-d.w*.2;
	float3 n = FlameColour(de);
	
	return float4(n, 1.);
}


technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
