// Additive Blend Stacked Sources
//
// Implements and additive blend - could also add
// many other fancy blending modes in future.
// Expects its input to be two sources stacked on top of each other vertically
// in a group - the bottom one should have a transform Y offset equal to the
// base canvas size.
//
// by Millennium Cyborg
// for use with OBS + StreamFX

// Always provided by OBS
uniform float4x4 ViewProj<
	bool automatic = true;
>;

uniform float4 Time<
	bool automatic = true;
>;

uniform float4 ViewSize<
	bool automatic = true;
>;

uniform texture2d InputA<
	bool automatic = true;
>;

// User parameters
uniform bool _00_SpecialSauce<
  bool automatic = false;
	string name = "Special Sauce";
	string description = "Save a bunch of extra cleanup if using for reflection";
> = true;

uniform float _01_TopSourceMult<
  bool automatic = false;
	string name = "Upper Source Gain";
	string description = "Amount contribution from upper source";
	string field_type = "slider";
	float minimum = -3;
	float maximum = 3;
	float step = 0.01;
> = 1.0;

uniform texture2d _02_BottomSource<
  string name = "Bottom Source";
>;

uniform float _03_BottomSourceMult<
  bool automatic = false;
	string name = "Lower Source Gain";
	string description = "Amount contribution from lower source";
	string field_type = "slider";
	float minimum = -3;
	float maximum = 3;
	float step = 0.01;
> = 1.0;

// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSDefault(VertData v_in) : TARGET {
  // Current pixel
	const float4 top_sample =
	  InputA.Sample(def_sampler, v_in.uv.xy);
  const float4 bottom_sample =
	  _02_BottomSource.Sample(def_sampler, v_in.uv.xy);

  if (_00_SpecialSauce) {
		// Extremely made up formula
		//
		// If you choose a small value for TopSourceMult and a large value for
		// BottomSourceMult this still doesn't give great results and you'll want
		// to set a threshold for the reflection mask that excludes glass over bg
    const float3 blend_rgb =
		  _01_TopSourceMult * top_sample.a * top_sample.rgb
      + lerp(1.0, _03_BottomSourceMult, top_sample.a) * bottom_sample.rgb;
    const float blend_a = top_sample.a > 0.0 ? 1.0 : bottom_sample.a;

    return float4(blend_rgb, blend_a);
  } else {
		// Just additive blending
    return _01_TopSourceMult * top_sample + _03_BottomSourceMult * bottom_sample;
  }

}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
